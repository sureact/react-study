{"ast":null,"code":"var _jsxFileName = \"/Users/milk717/WebstormProjects/learning-react/src/App.js\",\n  _s = $RefreshSig$();\nimport TodoTemplate from \"./component/TodoTemplate\";\nimport './index.css';\nimport TodoInsert from \"./component/TodoInsert\";\nimport TodoList from \"./component/TodoList\";\nimport { useCallback, useRef, useState } from \"react\";\n\n// const createBulkTodos = () => new Array(2500).fill(1).map((_, i)=>({id: i, text: `할일${i}`, checked: false}));\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createBulkTodos = () => {\n  console.log('함수 실행');\n  return new Array(2500).fill(1).map((_, i) => ({\n    id: i,\n    text: `할일${i}`,\n    checked: false\n  }));\n};\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState(createBulkTodos);\n  /*\n  id이 바뀐다고 해서 컴포넌트가 리렌더링 될 필요가 없다.\n  id값은 그저 참조하는 값일 뿐. 따라서 useRef사용\n   */\n  const nextId = useRef(4);\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n    setTodos(todos.concat(todo));\n    nextId.current += 1;\n  }, [todos]);\n  const onRemove = useCallback(id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }, [todos]);\n  const onToggle = useCallback(id => {\n    setTodos(todos.map(todo => todo.id === id ? {\n      ...todo,\n      checked: !todo.checked\n    } : todo));\n  }, [todos]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TodoTemplate, {\n      children: [/*#__PURE__*/_jsxDEV(TodoInsert, {\n        onInsert: onInsert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todos,\n        onRemove: onRemove,\n        onToggle: onToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"19jPfAucTjmKWf5YvbgDjRVyPZE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TodoTemplate","TodoInsert","TodoList","useCallback","useRef","useState","createBulkTodos","console","log","Array","fill","map","_","i","id","text","checked","App","todos","setTodos","nextId","onInsert","todo","current","concat","onRemove","filter","onToggle"],"sources":["/Users/milk717/WebstormProjects/learning-react/src/App.js"],"sourcesContent":["import TodoTemplate from \"./component/TodoTemplate\";\nimport './index.css';\nimport TodoInsert from \"./component/TodoInsert\";\nimport TodoList from \"./component/TodoList\";\nimport {useCallback, useRef, useState} from \"react\";\n\n// const createBulkTodos = () => new Array(2500).fill(1).map((_, i)=>({id: i, text: `할일${i}`, checked: false}));\n\nconst createBulkTodos = () => {\n    console.log('함수 실행')\n    return new Array(2500).fill(1).map((_, i)=>({id: i, text: `할일${i}`, checked: false}));\n}\n\nfunction App() {\n    const [todos, setTodos] = useState(createBulkTodos);\n    /*\n    id이 바뀐다고 해서 컴포넌트가 리렌더링 될 필요가 없다.\n    id값은 그저 참조하는 값일 뿐. 따라서 useRef사용\n     */\n    const nextId = useRef(4);\n\n    const onInsert = useCallback(text => {\n        const todo = {\n            id: nextId.current,\n            text,\n            checked: false,\n        }\n        setTodos(todos.concat(todo));\n        nextId.current += 1;\n    }, [todos])\n\n    const onRemove = useCallback(id=>{\n        setTodos(todos.filter(todo=>todo.id !== id));\n    },[todos])\n\n    const onToggle = useCallback(id=>{\n        setTodos(\n            todos.map(todo=> todo.id === id ? {...todo, checked: !todo.checked} : todo)\n        );\n    },[todos]);\n\n    return (\n        <>\n            <TodoTemplate>\n                <TodoInsert onInsert={onInsert}/>\n                <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n            </TodoTemplate>\n        </>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,YAAY,MAAM,0BAA0B;AACnD,OAAO,aAAa;AACpB,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAAQC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;;AAEnD;AAAA;AAAA;AAEA,MAAMC,eAAe,GAAG,MAAM;EAC1BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpB,OAAO,IAAIC,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAI;IAACC,EAAE,EAAED,CAAC;IAAEE,IAAI,EAAG,KAAIF,CAAE,EAAC;IAAEG,OAAO,EAAE;EAAK,CAAC,CAAC,CAAC;AACzF,CAAC;AAED,SAASC,GAAG,GAAG;EAAA;EACX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACC,eAAe,CAAC;EACnD;AACJ;AACA;AACA;EACI,MAAMc,MAAM,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAExB,MAAMiB,QAAQ,GAAGlB,WAAW,CAACY,IAAI,IAAI;IACjC,MAAMO,IAAI,GAAG;MACTR,EAAE,EAAEM,MAAM,CAACG,OAAO;MAClBR,IAAI;MACJC,OAAO,EAAE;IACb,CAAC;IACDG,QAAQ,CAACD,KAAK,CAACM,MAAM,CAACF,IAAI,CAAC,CAAC;IAC5BF,MAAM,CAACG,OAAO,IAAI,CAAC;EACvB,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMO,QAAQ,GAAGtB,WAAW,CAACW,EAAE,IAAE;IAC7BK,QAAQ,CAACD,KAAK,CAACQ,MAAM,CAACJ,IAAI,IAAEA,IAAI,CAACR,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChD,CAAC,EAAC,CAACI,KAAK,CAAC,CAAC;EAEV,MAAMS,QAAQ,GAAGxB,WAAW,CAACW,EAAE,IAAE;IAC7BK,QAAQ,CACJD,KAAK,CAACP,GAAG,CAACW,IAAI,IAAGA,IAAI,CAACR,EAAE,KAAKA,EAAE,GAAG;MAAC,GAAGQ,IAAI;MAAEN,OAAO,EAAE,CAACM,IAAI,CAACN;IAAO,CAAC,GAAGM,IAAI,CAAC,CAC9E;EACL,CAAC,EAAC,CAACJ,KAAK,CAAC,CAAC;EAEV,oBACI;IAAA,uBACI,QAAC,YAAY;MAAA,wBACT,QAAC,UAAU;QAAC,QAAQ,EAAEG;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE,eACjC,QAAC,QAAQ;QAAC,KAAK,EAAEH,KAAM;QAAC,QAAQ,EAAEO,QAAS;QAAC,QAAQ,EAAEE;MAAS;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EACtD,iBAChB;AAEX;AAAC,GApCQV,GAAG;AAAA,KAAHA,GAAG;AAsCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}